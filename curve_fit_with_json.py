import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
#
import json
from pprint import pprint

with open ('insert json file here') as data_file:
    data = json.load(data_file)
    
pprint(data)
#%%

xdata = np.array([88.919,92.731,96.466,100.13,103.73,107.273,110.757,114.194,117.582,120.931,124.234,127.503,130.733,133.929,137.096,140.231,143.335,146.41,149.46,152.476,155.471,158.447,161.404,164.34,167.249,170.141,173.013,175.862,178.697,181.513,184.309,187.093,189.855,192.606,195.337,198.058,200.763,203.454,206.138,208.802,211.454,214.102,216.732,219.354,221.971,224.571,227.162,229.748,232.326,234.899,237.459,240.02,242.568,245.118,247.66,250.201,252.738,255.269,257.801,260.325,262.854,265.381,267.899,267.923,270.423,272.919,275.416,277.917,280.408,282.911,285.409,287.91,290.414,292.929,295.44,297.962,300.484,303.012,305.539,308.075,310.617,313.154,315.709,318.273,323.352,325.931,328.509,331.101,333.701,336.31,338.929,341.563,344.209,91.121,94.89,98.583,102.209,105.775,109.282,112.742,116.151,119.513,122.833,126.117,129.363,132.57,135.749,138.895,142.01,145.104,148.164,151.202,154.211,157.196,160.151,163.085,166.004,168.904,171.786,174.647,177.489,180.314,183.121,185.912,188.683,191.44,194.184,196.908,199.622,202.325,205.01,207.688,210.35,213.004,215.646,218.276,220.904,223.515,226.119,228.724,231.309,233.897,236.472,239.041,241.607,244.167,246.725,249.279,251.826,254.373,256.92,259.461,262,264.542,267.076,269.623,272.154,274.698,277.238,279.779,282.322,284.864,287.407,289.953,292.497,295.043,297.591,300.145,302.694,305.254,307.817,310.381,312.955,315.533,318.115,323.238,325.837,328.442,331.06,333.691,336.317,338.958,341.609,344.273])

#print x.size
             
ydata = np.array([0.00064938,0.0025475,0.0086807,0.026244,0.071643,0.17916,0.41451,0.89751,1.8309,3.5475,6.5535,11.621,19.835,32.729,52.395,81.548,123.7,183.27,265.85,377.76,527.35,724.31,979.83,1306.6,1718.1,2231.9,2865.7,3638.4,4574.4,5696,7028.1,8602.2,10442,12585,15058,17904,21154,24846,29031,33730,38995,44889,51424,58671,66686,75481,85128,95694,107220,119770,133360,148120,164020,181220,199710,219590,240910,263720,288130,314130,341910,371480,402810,403120,436160,471120,508140,547350,588590,632310,678280,726730,777750,831600,888050,947530,1009900,1075300,1143800,1215700,1291000,1369500,1452100,1538500,1720800,1819200,1921700,2028900,2140800,2257700,2379800,2507400,2640800,0.001452,0.0052413,0.016631,0.047315,0.1226,0.2927,0.6517,1.3624,2.6944,5.0741,9.1519,15.868,26.539,43.021,67.722,103.8,155.45,227.47,326.29,459.12,634.91,863.41,1157,1530.2,1998.1,2578.5,3289.8,4153.5,5193.2,6433.5,7902.1,9625.2,11636,13970,16652,19729,23238,27208,31696,36729,42364,48640,55600,63320,71806,81135,91394,102550,114750,127990,142340,157880,174650,192750,212210,233070,255460,279450,305040,332330,361460,392360,425370,460190,497280,536490,577970,621810,668040,716790,768170,822160,878940,938600,1001300,1066900,1135900,1208200,1283900,1363300,1446300,1533100,1716600,1815600,1919000,2027200,2140400,2258000,2381100,2509700,2644100])

#print xdata.size

#xdata = np.array([1, 2, 3, 4, 5])

#ydata = np.array([8, 10, 12, 14, 16])

#yn = ydata + 0.2*np.random.normal(size=len(xdata))
#%%
#pc = float(raw_input("What is the critical pressure of the substance?"))#4.26096
#tc = float(raw_input("What is the critical temperature of the substance?"))#369
pc = 4260960
tc = 369

def fit_func(x, a,b,c,d):
    #return -a + np.sqrt(a**2 + 4*(1/(((-2.294*10**-5*x**2)-(0.02681*x)+26.48)*(
    #(3.446*10**-6*x**3)-(4.558*10**-4*x**2)+(0.688*x)+163.74)))*(x*np.log(x)-x-b))*(
    #((1.723*10**-6*x**3)-(2.279*10**-4*x**2)+(0.0394*x)+81.87)/((-2.294*10**-5*x**2)-(0.02681*x)+26.48))
    #q = a*np.exp(b*x)+c    
    #THETA = 1 - T/Tc
    #RHS = 0
    ##for i, param in enumerate(args):
    #    RHS += param*THETA**
    q = pc * np.exp(((a*(1-(-x/tc))) + b * ((1-(-x/tc))**1.5) + c * ((1-(-x/tc))**3) + d * ((1-(-x/tc))**6) )/(1 - (1-(x/tc))))
    return q
#%%
popt, pcov = curve_fit(fit_func, xdata, ydata)
print popt
sse = 0
sst = 0
g_total = 0
x_total = 0
fit_total = 0
for i in range(0, xdata.size):
    sse_a = ydata[i] - fit_func(xdata[i], *popt)
    sse = sse + sse_a**2
    g_total = xdata[i] + fit_func(xdata[i], *popt) + g_total
    #x_total = xdata[i] + x_total
    #fit_total = fit_func(xdata[i], *popt) + fit_total
    #x_mean = x_total/xdata.size
    #fit_mean = fit_total/xdata.size
    g_mean_total = g_total/(2*xdata.size)
    sst = ((xdata[i] - g_mean_total)**2)+((fit_func(xdata[i], *popt) - g_mean_total)**2) + sst
print 'SSE Value:', sse
print 'SST Value:', sst
r_squared = 1 - sse/sst
print 'R-squared Value:', r_squared
#%%
#[a, b, c] = params[0]

#coefficients = np.polyfit(x, y, 3)
#polynomial = np.poly1d(coefficients)

#x_new = np.linspace(x[0], x[-1], 50)
#y_new = polynomial(x_new)

#plt.plot(x,y,'o', x_new, y_new)
#plt.xlim([x[0]-1, x[-1] + 1])
plt.title("Vapor Pressure vs Temperature for your substance")
plt.grid(True)
plt.xlabel("Temperature (K)")
plt.ylabel("Vapor Pressure (Pa)")
#plt.xlim([xdata[0]-20, xdata[-1] + 20])
#plt.ylim([ydata[0]-20, ydata[-1] + 20])
xx = np.linspace(np.min(xdata),np.max(xdata))
plt.plot(xx, fit_func(xx, *popt), 'r-', label="Fitted Curve")
plt.plot(xdata, ydata, 'ko')
plt.yscale('log')
plt.show()


































